buildscript {
    ext.kotlin_version = '1.2.31'
    ext.coroutines_version = '0.22.5'

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group 'com.diklimchuk'
version '0.0.4'

apply plugin: 'kotlin2js'
apply plugin: 'com.moowork.node'

apply from: file('gradle/publish-npm.gradle')
apply from: file('gradle/publish-jitpack.gradle')

sourceCompatibility = 1.8

repositories { mavenCentral() }

kotlin.experimental.coroutines "enable"

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile("org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutines_version") {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-js'
    }
}

[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions.moduleKind = "commonjs"
    kotlinOptions.sourceMap = true
}

node {
    download = true
}

task installMocha(type: NpmTask) {
    args = ['install', 'mocha']
}

task installKotlinCoroutines(type: NpmTask) {
    args = ['install', 'kotlinx-coroutines-core']
}

task installKotlinTest(type: NpmTask) {
    args = ['install', 'kotlin-test']
}

task installSinon(type: NpmTask) {
    args = ['install', 'sinon']
}


def nodeModuleDir = "$rootDir/node_modules/$name"
def nodeModuleMainFile = "${name}.js"

static def coroutinesCallFix(file) {
    if (file.exists()) {
        def contents = file.getText('UTF-8')
        contents = contents.replaceAll('kotlinx-coroutines-core-js', 'kotlinx-coroutines-core')
        file.write(contents, 'UTF-8')
    }
}

task coroutinesFix(dependsOn: compileKotlin2Js) {
    doLast { coroutinesCallFix(compileKotlin2Js.outputFile) }
}
classes.dependsOn coroutinesFix

task testCoroutinesFix(dependsOn: compileTestKotlin2Js) {
    doLast { coroutinesCallFix(compileTestKotlin2Js.outputFile) }
}
testClasses.dependsOn testCoroutinesFix

task createNodeModule(type: Copy, dependsOn: compileKotlin2Js) {
    from compileKotlin2Js.outputFile
    into nodeModuleDir

    doLast {
        def file = new File("$nodeModuleDir/package.json")
        file.text = """{ "main": "$nodeModuleMainFile" }"""
    }
}
classes.dependsOn createNodeModule

clean { delete "$rootDir/node_modules"}

task runMocha(type: NodeTask, dependsOn: [compileTestKotlin2Js, installMocha, installKotlinTest, installSinon, installKotlinCoroutines]) {
    script = file("${rootDir}/node_modules/mocha/bin/mocha")
    args = [compileTestKotlin2Js.outputFile]
    onlyIf { compileTestKotlin2Js.outputFile.exists() }
}

test.dependsOn runMocha
